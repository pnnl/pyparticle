# >>> RELEASE KIT START
name: CI
on:
  push: { branches: [ main ] }
  pull_request: { branches: [ main ] }
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install package + dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Lint (ruff)
        run: ruff check src tests || true
      - name: Type check (mypy)
        run: mypy || true
      - name: Run tests with coverage
        run: pytest
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          verbose: true
# <<< RELEASE KIT END
name: CI

on:
  push:
    branches: [ main, master, features/** ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
          pip install .

      - name: Run linters
        # optional quick lint step; don't fail CI on style here unless desired
        run: |
          pip install black flake8
          black --check . || true
          flake8 || true

      - name: Run tests with coverage
        env:
          MPLBACKEND: Agg
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=PyParticle --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false
name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest hypothesis pytest-cov
          pip install -e .

      - name: Run tests with coverage
        env:
          MPLBACKEND: Agg
          CUDA_VISIBLE_DEVICES: ""
          PYPARTICLE_RUN_EXAMPLES: "0"
          PYTEST_SEED: "1337"
        run: |
          pytest -q --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          flags: unittests
          fail_ci_if_error: false

  conda-tests:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: false
          use-mamba: true

      - name: Create pyparticle environment from environment.yml
        run: |
          mamba env create -f environment.yml -n pyparticle

      - name: Install package into conda env
        run: |
          conda run -n pyparticle python -m pip install --upgrade pip
          conda run -n pyparticle python -m pip install -e .

      - name: Run unit tests inside pyparticle env
        env:
          MPLBACKEND: Agg
          PYPARTICLE_RUN_EXAMPLES: "0"
          PYTEST_SEED: "1337"
        run: |
          conda run -n pyparticle pytest -q tests/unit -q
